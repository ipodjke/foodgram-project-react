name: Foodgram project

on:
  push:
    branches: [ master ]

jobs:
  # tests:
  #   runs-on: ubuntu-latest
  #   env:
  #     SECRET_KEY: ${{ secrets.SECRET_KEY }}
  #     DJANGO_ALLOWED_HOSTS: ${{ secrets.DJANGO_ALLOWED_HOSTS }}
  #     SQL_ENGINE: ${{ secrets.SQL_ENGINE }}
  #     SQL_DATABASE: ${{ secrets.SQL_DATABASE }}
  #     SQL_USER: ${{ secrets.SQL_USER }}
  #     SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}
  #     SQL_HOST: ${{ secrets.SQL_HOST }}
  #     SQL_PORT: ${{ secrets.SQL_PORT }}
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Set up Python 
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: 3.8
  #     - name: Install dependencies
  #       run: | 
  #         python -m pip install --upgrade pip 
  #         pip install pipenv
  #         cd backend
  #         pipenv install --system --deploy --dev
  #     - name: Test with flake8 (django tests and pytest )
  #       # обязательно появятся в версии 2.0
  #       # python manage.py test
  #       # pytest
  #       run: |
  #         python -m flake8
         
  # build_and_push_to_docker_hub:
  #   name: Push Docker images to Docker Hub
  #   runs-on: ubuntu-latest
  #   needs: tests
  #   steps:
  #     - name: Check out the repo
  #       uses: actions/checkout@v2
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1
  #     - name: Login to Docker 
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }} 
  #         password: ${{ secrets.DOCKER_PASSWORD }}
  #     - name: build and push backend_foodgram
  #       uses: docker/build-push-action@v2
  #       with:
  #         context: backend/
  #         file: backend/Dockerfile.prod
  #         push: true
  #         tags: ${{ secrets.DOCKER_USERNAME }}/backend_foodgram:latest
  #     - name: build and push frontend_foodgram
  #       uses: docker/build-push-action@v2
  #       with:
  #         context: frontend/
  #         file: frontend/Dockerfile.prod
  #         push: true
  #         tags: ${{ secrets.DOCKER_USERNAME }}/frontend_foodgram:latest

  deploy:
    runs-on: ubuntu-latest
    # needs: build_and_push_to_docker_hub
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@master
      - name: copy docker-compose.prod.yml and nginx.prod.conf to remote server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.CLOUD_HOST }}
          username: ${{ secrets.CLOUD_HOST_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: infra/docker-compose.prod.yml, infra/nginx.prod.conf
          target: 
          overwrite: true
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master 
        with:
          host: ${{ secrets.CLOUD_HOST }}
          username: ${{ secrets.CLOUD_HOST_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/backend_foodgram
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/frontend_foodgram
            sudo docker-compose stop $(sudo docker ps -a -q)
            sudo docker-compose -f docker-compose.prod.yml up -d 

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: send done message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: ${{ github.workflow }} успешно загружен на сервер!


# sudo docker-compose rm -f
#             sudo rm -f .env
#             touch .env
#             echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
#             echo "DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }}" >> .env
#             echo "DB_ENGINE=${{ secrets.DB_ENGINE }}" >> .env
#             echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
#             echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
#             echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
#             echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
#             echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
#             echo "DJANGO_SU_NAME=${{ secrets.DJANGO_SU_NAME }}" >> .env
#             echo "DJANGO_SU_EMAIL=${{ secrets.DJANGO_SU_EMAIL }}" >> .env
#             echo "DJANGO_SU_PASSWORD=${{ secrets.DJANGO_SU_PASSWORD }}" >> .env